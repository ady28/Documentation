#Ubuntu
#Download tar
curl -L https://github.com/prometheus/prometheus/releases/download/v2.32.1/prometheus-2.32.1.linux-amd64.tar.gz -x "http://192.168.1.254:80" --output prometheus.tar.gz
#Unpack archive
tar xvfz prometheus.tar.gz
cd prometheus-2.32.1.linux-amd64
#Get help on prometheus
./prometheus --help
#Prometheus can be started with a config file. A file named prometheus.yml is provided as a sample
#Start prometheus
./prometheus --config.file=prometheus.yml
#Navigate to the IP address of the serve with port 9090
#Prometheus now monitors itself
#Go to Graph and enter the following expression to get data about it: promhttp_metric_handler_requests_total
#Try another expression: promhttp_metric_handler_requests_total{code="200"}
#You can count time series
count(promhttp_metric_handler_requests_total)
#Show the values of a metric from the last 30 seconds
go_threads{group="canary"}[30s]
#Show the value of a metric from a minute ago
go_threads{group="canary"} offset 1m
#Send queries via API
Invoke-RestMethod -Uri 'http://192.168.1.250:9090/api/v1/query?query=go_info'

#You can run prometheus so that it reloads config and rules files when calling a POST method:
./prometheus --config.file=prometheus.yml --web.enable-lifecycle
#Now you can use the following command to reload configuration
Invoke-RestMethod -Uri 'http://192.168.1.250:9090/-/reload' -Method Post

#Docker
docker run -p 9090:9090 prom/prometheus