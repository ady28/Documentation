You are doing Continuous Delivery if:
 - software is deployable throughout its lifecycle
 - prioritize keeping software deployable over working on new features
 - fast automated feedback on any change made
 - push button deployment of any software version any time

Continuous delivery != Continuous deployment
C Deployment automatically deploys code after a change while delivery has it ready to be deployed at the push of a button

-Version control
-Tests
-Config management
-Monitoring

Continuous Delivery fits with the Kanban approach of software delivery (for delivering small features when they are ready)

Vagrant - good tool for building environments on local machines for testing new app versions
Docker is very good for continuous delivery as you can start applications fast
Docker machine is a tool like Vagrant meant only to create VMs for docker containers (works with hypervisers and clouds)
Docker cluster solutions:
	Apache Mesos
	Kubernetes
	Docker machine + compose + swarm
A test driven infrastructure is mandatory. Pester is one of the choices for Windows

PaaS solutions:
	Cloud foundry (public and private cloud)
	Heroku (public cloud)
	Google App Engine (public cloud)
	Amazon Elastic Beanstalk (public cloud)
	Azure App Service (public cloud)
	Open Shift (public and private cloud)
	Flynn and Dokku (small PaaS services for docker)

Unit tests should test a function/method or at most a class/script

Code quality must be checked:
	SonarQube (mainly for java but has plugins for other languages including ps through scriptanalyzer)
	Powershell ScriptAnalyzer



