In a git repo the .git folder stores repository objects
The only ones somewhat safe to edit are:
  description file
  config file
  hooks folder (script to be executed during git actions)

git init (new repo)
git clone (clone repo)
git clone <folder_name> (clone repo but change project folder name)

git add -a (add all new or modified files to the staged list)
git add <file>
git add <folder>

git commit (commits all files in staged list)
git commit -a (also runs git add-a then commit)
git commit -m (adds a commit message)

git status
git reset (removes files from the staged list)
git diff (shows changed made to commited files)
git log (list commits in reverse chronological order)

To exclude files from getting commited make a .gitignore file
	*.log (ignore files that end with .log)
	output\ (ignore files in a directory named output)
	out (ignore files or folders with out in name)
	# is for comments
It is also possible to createa global ignore file:
	git config --global core.excludeFiles <path>
git add -f <filename> (force to add an ignored file)
git check-ignore -v <filename>  (debug why a file is ignored)


HEAD - reference to the most recent commit in current branch

git reset (removes files added to staged list) - use on private branch
git reset HEAD`2 (moves back 2 commits)
	--soft (reverts commit metadata and is used to change commit messages)
	--mixed (updates only staged list - leaves uncommited changes)
	--hard (deletes also uncommited changes)
git reset <filename> (opposite to git add)

git revert - undo a commit by making a new commit (safe way to undo changes)
git revert HEAD`2
git revert -n (do not commit automatically after revert)

git checkout - updates files in working tree
git checkout <filename>

git branch <options> (create a branch from the current parent)

git checkout -b <branch> (create branch and switches to it)
git checkout <existing_branch> (switches to branch)
git branch -v (shows branches and last commit for each)
git branch <branch> <existing> (branch from a branch that is not the parent)
git branch -d <branch> (delete branch)

git checkout -b -orphan <branch> (create branch from parent and starts brand new history)

Branching 
	Master -> Development -> Feature 1
				 Bug fix
git merge <branch>


git clone (remote_repo_address) (clone a remote repo)
git pull origin <branch> (incorporate changes from the remote repo branch into yours)
git push origin <branch> (push branch to the origin repo)
git push origin --delete <branch> (delete branch on remote repo)

git fetch - shows what files are different on the remote repo from your local one but does not pull them

rebase - add changes from master to current branch in cases when you made a branch, made changes and other people changed master; the new master changes will be added after the old ones and your local changes go after those

azure devops- pull request: before merging a branch in master make a pull request (like a code review)








