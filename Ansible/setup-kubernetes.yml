---
- hosts: kubernetes
  become: true
  handlers:
  - name: Restart containerd
    systemd:
      state: restarted
      name: containerd
      daemon_reload: true
    listen: restart containerd
  - name: Restart ufw
    systemd:
      state: restarted
      name: ufw
      daemon_reload: true
    listen: restart ufw
  - name: Restart kubelet
    systemd:
      state: restarted
      name: kubelet
      daemon_reload: true
    listen: restart kubelet
  tasks:
  - name: set an optional environment with proxy vars
    ansible.builtin.set_fact:
      proxy_env:
        http_proxy: "192.168.1.254:80"
        https_proxy: "192.168.1.254:80"
        no_proxy: localhost,.testcorp.local,192.168.1.0/24,10.0.0.0/8,172.16.0.0/16,.cluster.local
  - name: Allow firewall ports for kubernetes master
    community.general.ufw:
      rule: allow
      proto: "{{ item.proto }}"
      port: "{{ item.port }}"
    loop:
      - port: '6443'
        proto: 'tcp'
      - port: '2379'
        proto: 'tcp'
      - port: '2380'
        proto: 'tcp'
      - port: '10250'
        proto: 'tcp'
      - port: '10251'
        proto: 'tcp'
      - port: '10252'
        proto: 'tcp'
      - port: '10255'
        proto: 'tcp'
      - port: '8472'
        proto: 'udp'
    when: "'kubernetes-master' in group_names"
    notify: restart ufw
  - name: Allow firewall ports for kubernetes workers
    community.general.ufw:
      rule: allow
      proto: "{{ item.proto }}"
      port: "{{ item.port }}"
    loop:
      - port: '10250'
        proto: 'tcp'
      - port: '10255'
        proto: 'tcp'
      - port: '8472'
        proto: 'udp'
      - port: '30000:32767'
        proto: 'tcp'
    when: "'kubernetes-worker' in group_names"
    notify: restart ufw
  - name: 'Allow ufw DEFAULT_FORWARD_POLICY=ACCEPT'
    ufw:
      direction: routed
      default: allow
      route: yes
    notify: restart ufw
  - name: disable swap in running instance
    ansible.builtin.command:
      cmd: swapoff -a
    changed_when: false
  - name: disable swap in the fstab file
    ansible.builtin.replace:
      path: /etc/fstab
      regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
      replace: '# \1'
  - name: create a empty file for containerd module.
    ansible.builtin.copy:
      content: ""
      dest: /etc/modules-load.d/containerd.conf
      force: no
  - name: configure module for containerd.
    ansible.builtin.blockinfile:
      path: /etc/modules-load.d/containerd.conf
      block: |
            overlay
            br_netfilter
  - name: Add modules
    community.general.modprobe:
      name: "{{ item  }}"
      state: present
    loop:
      - overlay
      - br_netfilter
  - name: create a empty file for kubernetes sysctl params.
    ansible.builtin.copy:
      content: ""
      dest: /etc/sysctl.d/99-kubernetes-cri.conf
      force: no
  - name: Configure sysctl params for Kubernetes.
    ansible.posix.sysctl:
      name: "{{ item  }}"
      value: '1'
      sysctl_set: true
      state: present
      reload: true
      sysctl_file: '/etc/sysctl.d/99-kubernetes-cri.conf'
    loop:
    - net.bridge.bridge-nf-call-ip6tables
    - net.bridge.bridge-nf-call-iptables
    - net.ipv4.ip_forward
  - name: Installing Prerequisites for Kubernetes
    ansible.builtin.apt:
      name: "{{ item  }}"
      state: present
    loop:
    - apt-transport-https
    - ca-certificates
    - gnupg-agent
    - curl
    - software-properties-common
  - name: Add Docker GPG apt Key
    ansible.builtin.apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
    environment: "{{ proxy_env | default(omit) }}"
  - name: Add docker repo to Debian package manager
    ansible.builtin.apt_repository:
      repo: deb https://download.docker.com/linux/ubuntu focal stable
      state: present
  - name: Install containerd
    ansible.builtin.apt:
      name: containerd.io
      state: present
      update_cache: yes
  - name: Start and enable containerd
    ansible.builtin.service:
      name: containerd
      state: started
      enabled: yes
  - name: get containerd default settings
    ansible.builtin.command:
      cmd: containerd config default
    changed_when: false
    register: containerd_config
  - name: set containerd config file
    ansible.builtin.copy:
      dest: "/etc/containerd/config.toml"
      content: "{{ containerd_config['stdout']  }}"
    notify: restart containerd
  - name: Create containerd service directory
    ansible.builtin.file:
      path: /etc/systemd/system/containerd.service.d
      state: directory
  - name: create a empty file for containerd service proxy
    ansible.builtin.copy:
      content: ""
      dest: /etc/systemd/system/containerd.service.d/http-proxy.conf
      force: no
  - name: configure proxy for containerd
    ansible.builtin.blockinfile:
      path: /etc/systemd/system/containerd.service.d/http-proxy.conf
      block: |
            [Service]
            Environment="HTTP_PROXY=http://192.168.1.254:80"
            Environment="HTTPS_PROXY=http://192.168.1.254:80"
            Environment="NO_PROXY=localhost,.testcorp.local,192.168.1.0/24,10.0.0.0/8,172.16.0.0/16,.cluster.local"
    notify: restart containerd
  - name: Add Google official GPG key
    ansible.builtin.apt_key:
      url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key
      state: present
    environment: "{{ proxy_env | default(omit) }}"
  - name: Add Kubernetes Repository
    ansible.builtin.apt_repository:
      repo: deb https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /
      state: present
      filename: kubernetes
  - name: Installing Kubernetes Cluster Packages.
    ansible.builtin.apt:
      name: "{{ item  }}=1.28.0-1.1"
      state: present
      update_cache: yes
    loop:
    - kubeadm
    - kubectl
    - kubelet
  - name: Hold kubernetes packages
    ansible.builtin.dpkg_selections:
      name: "{{ item  }}"
      selection: hold
    loop:
    - kubeadm
    - kubectl
    - kubelet
  - name: configure proxy for kubelet
    ansible.builtin.blockinfile:
      path: /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf
      block: |
            Environment="HTTP_PROXY=http://192.168.1.254:80"
            Environment="HTTPS_PROXY=http://192.168.1.254:80"
            Environment="NO_PROXY=localhost,.testcorp.local,192.168.1.0/24,10.0.0.0/8,172.16.0.0/16,.cluster.local"
    notify: restart kubelet
- hosts: kubernetes-master
  become: true
  tasks:
  - name: set an optional environment with proxy vars
    ansible.builtin.set_fact:
      proxy_env:
        http_proxy: "192.168.1.254:80"
        https_proxy: "192.168.1.254:80"
        no_proxy: localhost,.testcorp.local,192.168.1.0/24,10.0.0.0/8,172.16.0.0/16,.cluster.local
  - name: Initialize kubernetes Cluster
    ansible.builtin.command:
      cmd: kubeadm init --pod-network-cidr=10.244.0.0/16
    environment: "{{ proxy_env | default(omit) }}"
  - name: Start and enable kubelet
    ansible.builtin.service:
      name: kubelet
      state: started
      enabled: yes
  - name: Create .kube local directory
    ansible.builtin.file:
      path: /home/user100/.kube
      state: directory
  - name: Copy kubeconfig file for user
    ansible.builtin.copy:
      src: /etc/kubernetes/admin.conf
      dest: /home/user100/.kube/config
      remote_src: yes
      owner: user100
      group: user100
  - name: Copy flannel file
    ansible.builtin.copy:
      src: /home/user100/ansible/flannel.yml
      dest: /home/user100/flannel.yml
  - name: install Pod network
    ansible.builtin.shell: 
      cmd: kubectl apply -f /home/user100/flannel.yml
    become: yes
    become_user: user100
  - name: Get the token for joining the worker nodes
    ansible.builtin.shell: 
      cmd: kubeadm token create  --print-join-command
    become: yes
    become_user: user100
    register: kubernetes_join_command
  - name: Copy join command to local file.
    ansible.builtin.copy: 
      content: "{{ kubernetes_join_command.stdout_lines[0] }}"
      dest: "/tmp/kubernetes_join_command"
  - name: Copy join file to controller
    ansible.builtin.fetch:
      src: "/tmp/kubernetes_join_command"
      dest: "/tmp/kubernetes_join_command"
      flat: yes
  - name: Remove local join command file
    ansible.builtin.file:
      path: "/tmp/kubernetes_join_command"
      state: absent
  - name: Check if Helm binary exists.
    ansible.builtin.stat:
      path: /usr/local/bin/helm
    register: helm_check
  - name: Check Helm version.
    ansible.builtin.command:
      cmd: /usr/local/bin/helm version
    failed_when: false
    changed_when: false
    register: helm_existing_version
  - name: Download helm.
    ansible.builtin.unarchive:
      src: https://get.helm.sh/helm-v3.2.1-linux-amd64.tar.gz
      dest: /tmp
      remote_src: true
      mode: 0755
    register: helm_download
    when:
      not helm_check.stat.exists or helm_version not in helm_existing_version.stdout
    environment: "{{ proxy_env | default(omit) }}"
  - name: Copy helm binary into place.
    ansible.builtin.copy:
      src: /tmp/linux-amd64/helm
      dest: /usr/local/bin/helm
      mode: 0755
      remote_src: true
    become: true
    when: helm_download is changed

- hosts: kubernetes-worker
  become: true
  tasks:
  - name: Copy join command from Ansiblehost to the worker nodes.
    ansible.builtin.copy:
      src: /tmp/kubernetes_join_command
      dest: /tmp/kubernetes_join_command
      mode: 0500
  - name: Join the Worker nodes to the cluster.
    ansible.builtin.command:
      cmd: sh /tmp/kubernetes_join_command