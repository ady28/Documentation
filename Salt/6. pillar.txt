#Create pillar_roots directory
sudo mkdir /srv/pillar
#Set permissions
sudo chgrp testg /srv/pillar
sudo chmod 775 /srv/pillar
sudo chmod g+s /srv/pillar
#Log out and log in or run bash
#We will extend the previous formula to also let salt create mysql databases
#In map.jinja add the following to Bedian and Redhat at the end of each section
#Debian
    'python': 'python3-mysqldb',
#RedHat
    'python': 'python3-mysql',
#Create a python.sls file
sudo nano python.sls
#Add the following text
{% from "mysql/map.jinja" import mysql with context %}

mysql_python_install:
  pkg.installed:
    - name: {{ mysql.python }}
#Add the python state to init.sls
sudo nano init.sls
#At the end add
  - mysql.python
#Test formula
sudo salt -L 'sminion01,sminion02' state.sls mysql test=true
#Run formula
sudo salt -L 'sminion01,sminion02' state.sls mysql

#Create a root.sls state
sudo nano root.sls
#Set the file to
{% if grains['os_family'] == 'RedHat' %}

mysql_root_password_set:
  cmd.run:
    - name: mysqladmin --host localhost --user root password 'temppass'
    - unless: mysql --host localhost --user root --password="temppass" --execute="SELECT 1;"

{% endif %}

mysql_root_user:
  mysql_user.present:
    - name: root
    - password: temppass
    - host: localhost

#Create a mysql.sls pillar file
cd /srv/pillar
nano mysql.sls
#Add
mysql:
  root:
    name: root
    password: temppass
#Create a top.sls pillar file
nano top.sls
#Add
base:
  'sminion01':
    - mysql
  'sminion02':
    - mysql
#Update pillar data
sudo salt '*' saltutil.refresh_pillar
#List pillars
sudo salt '*' pillar.items

#Move back to the formula
cd /srv/salt/mysql
#open root.sls
sudo nano root.sls
#Replace root and temppass with
{{ pillar['mysql']['root']['name'] }}
#For the password keep the quotes in place and place the pillar inside them
{{ pillar['mysql']['root']['password'] }}
#Add root.sls to init.sls
sudo nano init.sls
#Add
  - mysql.root
#Test
sudo salt -L 'sminion01,sminion02' state.sls mysql test=true

#Add a service.sls file to check that mysql is running before configuring it
sudo nano service.sls
#Add text
{% from "mysql/map.jinja" import mysql with context %}

mysql_service_enable:
  service.running:
    - name: {{ mysql.service }}
#Add to init file
sudo nano init.sls
#Add under mysql.server
  - mysql.service
#Test
sudo salt -L 'sminion01,sminion02' state.sls mysql test=true
#Run
sudo salt -L 'sminion01,sminion02' state.sls mysql

#Exercise: set the pillar data also in server.sls

#Set up gpg renderer on master
#Create directory
sudo mkdir /etc/salt/gpgkeys
#set security
sudo chmod 0700 /etc/salt/gpgkeys
#Create entropy
sudo apt install -y rng-tools
sudo rngd -r /dev/urandom
#Create master key with defaults and Full Name Saltstack
#Do not use a passphrase
sudo gpg --gen-key --homedir /etc/salt/gpgkeys
#Export the keys
sudo gpg --homedir /etc/salt/gpgkeys --armor --export Saltstack > exported_pubkey.gpg
#Import the key
gpg --import exported_pubkey.gpg
#Encrypt the temppass password
echo -n "temppass" | gpg --armor --trust-model always --encrypt -r Saltstack
#You will need all output including the ---BEGIN... and ---END parts
#Open mysal pillar
nano /srv/pillar/mysql.sls
#Add #!yaml|gpg at the top of the file
#Instead of temppass after password: write:
|
#Then add the encrypted string with 6 spaces on each line (it is a yaml file after all)
#Refresh pillar data
sudo salt '*' saltutil.refresh_pillar
#Check pillars
sudo salt '*' pillar.items

#Create database.sls
sudo nano database.sls
#Set the following text
{% for database, arg in salt['pillar.get']('mysql:database',{}).items() %}

mysql_db_create_{{ database }}:
  mysql_database.present:
    - name: {{ database }}
    - host: {{ arg.host }}
    - connection_user: {{ pillar['mysql']['root']['name'] }}
    - connection_pass: {{ pillar['mysql']['root']['password'] }}
    - connection_charset: utf8

{% endfor %}
#Open the mysql pillar file
nano /srv/pillar/mysql.sls
#At the level of root: create a new entry
  database:
    eski:
      host: localhost
    internal:
      host: localhost
#Test
sudo salt -L 'sminion01,sminion02' state.sls mysql.database test=true
#Add database to the init.sls file
#Test formula
sudo salt -L 'sminion01,sminion02' state.sls mysql test=true
#Run
sudo salt -L 'sminion01,sminion02' state.sls mysql